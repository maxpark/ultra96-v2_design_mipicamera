-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ouser is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_iuser_V_bv_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    p_iuser_V_bv_V_empty_n : IN STD_LOGIC;
    p_iuser_V_bv_V_read : OUT STD_LOGIC;
    p_ouser_V_bv_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_ouser_V_bv_V_full_n : IN STD_LOGIC;
    p_ouser_V_bv_V_write : OUT STD_LOGIC );
end;


architecture behav of ouser is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv19_4B000 : STD_LOGIC_VECTOR (18 downto 0) := "1001011000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv19_280 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001010000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv38_CCCCD : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000011001100110011001101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_iuser_V_bv_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_207_reg_293 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_ouser_V_bv_V_blk_n : STD_LOGIC;
    signal exitcond_reg_284 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s0_v_reg_105 : STD_LOGIC_VECTOR (18 downto 0);
    signal phi_mul_reg_116 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_196_reg_127 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_s0_v61_fu_144_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_207_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_urem_fu_180_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal next_mul_fu_194_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_236_2_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_236_2_reg_307 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_206_fu_154_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal next_urem_fu_168_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_3_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_158_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_200_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_214_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_cast_fu_222_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_neg_fu_226_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl1_fu_236_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_neg_cast_fu_232_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl1_cast_fu_244_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_248_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_s0_v_cast_fu_150_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_228_fu_254_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_6_fu_260_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_226_cast_fu_210_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_4_cast_fu_268_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_225_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_236_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_196_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_138_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_196_reg_127 <= idx_urem_fu_180_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_196_reg_127 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    p_s0_v_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_138_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_s0_v_reg_105 <= p_s0_v61_fu_144_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_s0_v_reg_105 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_138_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_mul_reg_116 <= next_mul_fu_194_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_116 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_284 <= exitcond_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_207_reg_293 <= p_207_fu_162_p2;
                p_236_2_reg_307 <= p_236_2_fu_278_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, exitcond_fu_138_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_138_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_138_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_iuser_V_bv_V_empty_n, p_ouser_V_bv_V_full_n, ap_enable_reg_pp0_iter1, p_207_reg_293, exitcond_reg_284)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_284 = ap_const_lv1_0) and (p_ouser_V_bv_V_full_n = ap_const_logic_0)) or ((p_207_reg_293 = ap_const_lv1_1) and (p_iuser_V_bv_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_iuser_V_bv_V_empty_n, p_ouser_V_bv_V_full_n, ap_enable_reg_pp0_iter1, p_207_reg_293, exitcond_reg_284)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_284 = ap_const_lv1_0) and (p_ouser_V_bv_V_full_n = ap_const_logic_0)) or ((p_207_reg_293 = ap_const_lv1_1) and (p_iuser_V_bv_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_iuser_V_bv_V_empty_n, p_ouser_V_bv_V_full_n, ap_enable_reg_pp0_iter1, p_207_reg_293, exitcond_reg_284)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_284 = ap_const_lv1_0) and (p_ouser_V_bv_V_full_n = ap_const_logic_0)) or ((p_207_reg_293 = ap_const_lv1_1) and (p_iuser_V_bv_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_iuser_V_bv_V_empty_n, p_ouser_V_bv_V_full_n, p_207_reg_293, exitcond_reg_284)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((exitcond_reg_284 = ap_const_lv1_0) and (p_ouser_V_bv_V_full_n = ap_const_logic_0)) or ((p_207_reg_293 = ap_const_lv1_1) and (p_iuser_V_bv_V_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_fu_138_p2)
    begin
        if ((exitcond_fu_138_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_138_p2 <= "1" when (p_s0_v_reg_105 = ap_const_lv19_4B000) else "0";
    idx_urem_fu_180_p3 <= 
        next_urem_fu_168_p2 when (tmp_3_fu_174_p2(0) = '1') else 
        ap_const_lv19_0;
    next_mul_fu_194_p2 <= std_logic_vector(unsigned(phi_mul_reg_116) + unsigned(ap_const_lv38_CCCCD));
    next_urem_fu_168_p2 <= std_logic_vector(unsigned(p_196_reg_127) + unsigned(ap_const_lv19_1));
    p_206_fu_154_p1 <= p_196_reg_127(2 - 1 downto 0);
    p_207_fu_162_p2 <= "1" when (p_206_fu_154_p1 = ap_const_lv2_0) else "0";
    p_225_fu_188_p2 <= "1" when (tmp_2_fu_158_p1 = ap_const_lv11_0) else "0";
    p_226_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_200_p4),10));
    p_228_fu_254_p2 <= std_logic_vector(unsigned(tmp_4_fu_248_p2) + unsigned(p_s0_v_cast_fu_150_p1));
    p_236_2_fu_278_p2 <= (p_236_fu_272_p2 and p_225_fu_188_p2);
    p_236_fu_272_p2 <= "1" when (p_226_cast_fu_210_p1 = p_4_cast_fu_268_p1) else "0";
    p_4_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_260_p3),10));

    p_iuser_V_bv_V_blk_n_assign_proc : process(p_iuser_V_bv_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, p_207_reg_293)
    begin
        if (((p_207_reg_293 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_iuser_V_bv_V_blk_n <= p_iuser_V_bv_V_empty_n;
        else 
            p_iuser_V_bv_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_iuser_V_bv_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_207_reg_293, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_207_reg_293 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_iuser_V_bv_V_read <= ap_const_logic_1;
        else 
            p_iuser_V_bv_V_read <= ap_const_logic_0;
        end if; 
    end process;

        p_neg_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_neg_fu_226_p2),20));

    p_neg_fu_226_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(p_shl_cast_fu_222_p1));

    p_ouser_V_bv_V_blk_n_assign_proc : process(p_ouser_V_bv_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_284)
    begin
        if (((exitcond_reg_284 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ouser_V_bv_V_blk_n <= p_ouser_V_bv_V_full_n;
        else 
            p_ouser_V_bv_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_ouser_V_bv_V_din <= p_236_2_reg_307;

    p_ouser_V_bv_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_284, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_284 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_ouser_V_bv_V_write <= ap_const_logic_1;
        else 
            p_ouser_V_bv_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_s0_v61_fu_144_p2 <= std_logic_vector(unsigned(p_s0_v_reg_105) + unsigned(ap_const_lv19_1));
    p_s0_v_cast_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s0_v_reg_105),20));
    p_shl1_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_236_p3),20));
    p_shl1_fu_236_p3 <= (tmp_5_fu_200_p4 & ap_const_lv7_0);
    p_shl_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_214_p3),19));
    p_shl_fu_214_p3 <= (tmp_5_fu_200_p4 & ap_const_lv9_0);
    tmp_2_fu_158_p1 <= p_196_reg_127(11 - 1 downto 0);
    tmp_3_fu_174_p2 <= "1" when (unsigned(next_urem_fu_168_p2) < unsigned(ap_const_lv19_280)) else "0";
    tmp_4_fu_248_p2 <= std_logic_vector(signed(p_neg_cast_fu_232_p1) - signed(p_shl1_cast_fu_244_p1));
    tmp_5_fu_200_p4 <= phi_mul_reg_116(37 downto 29);
    tmp_6_fu_260_p3 <= p_228_fu_254_p2(19 downto 19);
end behav;
